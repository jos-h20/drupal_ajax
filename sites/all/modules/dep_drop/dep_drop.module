<?php
function dep_drop_menu() {
    $items = array();
    $items['dep_drop'] = array(
      'title' => 'Dependent Drropdown',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ajax_examples_dependent_dropdown'),
      'access callback' => TRUE,
    );
    $items['dep_drop_success_page'] = array(
        'title' => 'Success',
        'page callback' => 'dep_drop_success',
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM,
    );
    return $items;
}
function _ajax_examples_get_first_dropdown_options() {
  // drupal_map_assoc() just makes an array('String' => 'String'...).
  return drupal_map_assoc(
  array(
    t('Full Spa Treatment'),
    t('Hair Cut'),
  )
  );
}


function _ajax_examples_get_second_dropdown_options($key = '') {
  $options = array(
    t('Full Spa Treatment') => drupal_map_assoc(
    array(
        t('Betty'),
        t('Jim'),
        t('Pete'),
        t('Jane'),
    )
    ),
    t('Hair Cut') => drupal_map_assoc(
    array(
        t('Penny'),
        t('Dip'),
        t('Hammer'),
        t('Fred'),
        t('Jenny'),
    )
    ),


  );
  if (isset($options[$key])) {
    return $options[$key];
  }
  else {
    return array();
  }
}
function ajax_examples_dependent_dropdown_callback($form, $form_state) {
  return $form['dropdown_second'];
}
function ajax_examples_dependent_dropdown($form, &$form_state) {
  // Get the list of options to populate the first dropdown.
  $options_first = _ajax_examples_get_first_dropdown_options();
  // If we have a value for the first dropdown from $form_state['values'] we use
  // this both as the default value for the first dropdown and also as a
  // parameter to pass to the function that retrieves the options for the
  // second dropdown.
  $selected = isset($form_state['values']['dropdown_first']) ? $form_state['values']['dropdown_first'] : key($options_first);

  $form['dropdown_first'] = array(
    '#type' => 'select',
    '#title' => 'Salon Treatment',
    '#options' => $options_first,
    '#default_value' => $selected,
    // Bind an ajax callback to the change event (which is the default for the
    // select form type) of the first dropdown. It will replace the second
    // dropdown when rebuilt.
    '#ajax' => array(
      // When 'event' occurs, Drupal will perform an ajax request in the
      // background. Usually the default value is sufficient (eg. change for
      // select elements), but valid values include any jQuery event,
      // most notably 'mousedown', 'blur', and 'submit'.
      // 'event' => 'change',
      'callback' => 'ajax_examples_dependent_dropdown_callback',
      'wrapper' => 'dropdown-second-replace',
    ),
  );

  $form['dropdown_second'] = array(
    '#type' => 'select',
    '#title' => $options_first[$selected] . ' ' . t('Service'),
    // The entire enclosing div created here gets replaced when dropdown_first
    // is changed.
    '#prefix' => '<div id="dropdown-second-replace">',
    '#suffix' => '</div>',
    // When the form is rebuilt during ajax processing, the $selected variable
    // will now have the new value and so the options will change.
    '#options' => _ajax_examples_get_second_dropdown_options($selected),
    '#default_value' => isset($form_state['values']['dropdown_second']) ? $form_state['values']['dropdown_second'] : '',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}

function ajax_examples_dependent_dropdown_submit($form, &$form_state) {
    $result = $form_state['values']['dropdown_second'];
    $_SESSION['result'] = $result;

    $form_state['redirect'] = 'dep_drop_success_page';
}


function dep_drop_success() {
    $stylist = $_SESSION['result'];
    return 'You booked: ' . $stylist;
}
